<?phpApp::uses('AppController', 'Controller');class EmailContentsController extends AppController {    public function admin_index() {        prd("asd");    }    public function admin_edit($id = NULL) {        $EmailRow = $this->EmailContent->read(null, $id);        if (count($EmailRow) == 0) {            $this->redirect(array('admin' => true, 'controller' => 'email_contents', 'action' => 'index'));        }        $request = $this->request;        if (($request->is("post") || $request->is("put"))) {            $data = $this->request->data;            $data['EmailContent']['modified'] = date("Y-m-d H:i:s");            /* KEY WORD VALIDATION START */            $keywordsArr = explode(",", $data["EmailContent"]["keywords"]);            $kr = array();            foreach ($keywordsArr as $k => $v) {                $mystring = $data["EmailContent"]["content"];                $findme = $v;                $pos = strpos($mystring, $findme);                if ($pos === false) {                    $kr[] = $v;                }            }            if (count($kr) > 0) {                $this->Session->setFlash(__("Please use <strong>" . implode(",", $kr) . '</strong> keywords in body.'), 'flash_error');                $this->redirect(array('admin' => true, 'controller' => 'email_contents', 'action' => 'edit', $id));            }            /* KEY WORD VALIDATION END */            if ($this->EmailContent->save($data)) {                $this->Session->setFlash(__('Email content update successfully.'), 'flash_success');                $this->redirect(array('admin' => true, 'controller' => 'email_contents', 'action' => 'index'));            } else {                $this->Session->setFlash(__('Email content could not be update.'), 'flash_error');            }        } else {            $this->request->data = $EmailRow;        }    }    public function admin_emailgrid() {        $page = $this->request->query['page'];        $limit = $this->request->query['rows'];        $sidx = $this->request->query['sidx'];        $sord = $this->request->query['sord'];        if (!$sidx) {            $sidx = 1;        }        $order_by = $sidx . ' ' . $sord;        $conditions = array();        $count = $this->EmailContent->find('count', array(            'recursive' => -1,            'conditions' => $conditions        ));        if ($count > 0) {            $total_pages = ceil($count / $limit);        } else {            $total_pages = 0;        }        if ($page > $total_pages) {            $page = $total_pages;        }        $start = $limit * $page - $limit;        $emailList = $this->EmailContent->find('all', array(            'conditions' => $conditions,            'order' => $order_by,            'limit' => $limit,            'offset' => $start        ));        $temp = array();        $responce = new stdClass();        $responce->page = $page;        $responce->total = $total_pages;        $responce->records = $count;        $i = 0;        $j = (($page - 1) * $limit) + 1;        if (is_array($emailList)) {            $temp = array();            foreach ($emailList as $emails) {                $title = $emails['EmailContent']['title'];                $subject = strip_tags($emails['EmailContent']['subject']);                $modified = $emails['EmailContent']['modified'];                $action = '';                if ($emails['EmailContent']['status'] == 0) {                    $action .= '<i class="fa fa-circle fa-lg clrDisable" onclick="changeCmsStatus(' . $emails['EmailContent']['id'] . ',0)" title="Change Status"></i>';                } else if ($emails['EmailContent']['status'] == 1) {                    $action .= '<i class="fa fa-circle fa-lg clrEmable" onclick="changeCmsStatus(' . $emails['EmailContent']['id'] . ',1)" title="Change Status"></i>';                }                $action .= '&nbsp;&nbsp;&nbsp;<a href="' . $this->webroot . 'admin/email_contents/edit/' . $emails['EmailContent']['id'] . '" title="Edit Content"><i class="fa fa-edit fa-lg"></i></a> ';                $responce->rows[$i]['id'] = $emails['EmailContent']['id'];                $responce->rows[$i]['cell'] = array($j, $title, $subject, $modified, $action);                $i++;                $j++;            }        }        echo json_encode($responce);        exit;    }    public function admin_changestatus() {        if ($this->request->is('ajax')) {            $data['EmailContent']['id'] = $this->request->data['id'];            $data['EmailContent']['status'] = $this->request->data['status'] == 1 ? 0 : 1;            if ($this->EmailContent->save($data)) {                echo '1';            } else {                echo '0';            }            exit;        } else {            $this->render("/nodirecturl");        }    }    public function admin_mail() {        $this->set('title_for_layout', 'Compose Mail');        $this->loadModel('User');        if ($this->request->is('post')) {            $data = $this->request->data;            //prd($data);            if (isset($data['submit']) && $data['submit'] == 'send_mail') {                /**                 * User Resuest from user list functionality.                 */                $userArr = explode(',', $data['user_ids']);                $user_emails = $this->User->find('all', array(                    'recursive' => -1,                    'conditions' => array('id' => $userArr),                    'fields' => array('email', 'first_name', 'last_name'),                ));                $email = '';                $names = '';                foreach ($user_emails as $emails) {                    $email[] = $emails['User']['email'];                    if (!empty($emails['User']['first_name'])) {                        $names[] = $emails['User']['first_name'] . " " . $emails['User']['last_name'];                    } else {                        $names[] = " ";                    }                }                $this->set('user_email', implode(',', $email));                $this->set('user_names', implode(',', $names));            } else {                /**                 * Mail send post request.                 */                $userEmails = $data['EmailContent']['to'];                $subject = $data['EmailContent']['subject'];                $message = $data['EmailContent']['content'];                $expression = "/^[a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.([a-zA-Z]{2,4})$/";                $userEmails = explode(',', $userEmails);                $temp = '';                foreach ($userEmails as $email) {                    if (!preg_match($expression, $email)) {                        $temp .= '<strong>' . $email . '</strong> , ';                    }                }                if (!empty($temp)) {                    $this->Session->setFlash(__('Incorrect mail addresses : ' . $temp), 'flash_error');                } else {                    //prd($data);                    $this->loadModel('EmailContent');                    if ($this->EmailContent->ComposeToManyMail($subject, $message, $userEmails)) {                        $this->Session->setFlash(__('Mail successfully send.'));                        $this->redirect(array('admin' => true, 'controller' => 'email_contents', 'action' => 'mail'));                    } else {                        $this->Session->setFlash(__('Mail cannot be sent. Please try again'));                    }                }            }        }    }    public function admin_email_tblData() {        $this->autoRender = false;        $outputData = $this->EmailContent->find('all');        $outputArray = array();        if (!empty($outputData)) {            foreach ($outputData as $outputRow) {                $row = array();                $row[] = $outputRow['EmailContent']['id'];                $row[] = $outputRow['EmailContent']['title'];                $row[] = $outputRow['EmailContent']['subject'];                $row[] = $outputRow['EmailContent']['modified'];                $row[] = '<span class="btn btn-sm btn-default"><i class="fa fa-edit"><i> EDIT</span>';                $outputArray['data'][] = $row;            }        }        //prd(json_encode( $outputArray ));         echo json_encode($outputArray);    }    public function admin_ckupload() {        $img = $_FILES['upload']['name'];        $ext = strtolower(pathinfo($img, PATHINFO_EXTENSION));        $imgName = uniqid() . '.' . $ext;        $url = PATH_UPLOAD_FILE . $imgName;        if (($_FILES['upload'] == "none") OR ( empty($_FILES['upload']['name']))) {            $message = "No file uploaded.";        } else if ($_FILES['upload']["size"] == 0) {            $message = "The file is of zero length.";        } else if (($_FILES['upload']["type"] != "image/pjpeg") AND ( $_FILES['upload']["type"] != "image/jpeg") AND ( $_FILES['upload']["type"] != "image/png")                AND ( $_FILES['upload']["type"] != "video/x-flv")AND ( $_FILES['upload']["type"] != "audio/mpeg")) {            $message = "The image must be in either JPG or PNG format. Please upload a JPG or PNG instead.";        } else if (!is_uploaded_file($_FILES['upload']["tmp_name"])) {            $message = "You may be attempting to hack our server. We're on to you; expect a knock on the door sometime soon.";        } else {            $message = "";            $move = @ move_uploaded_file($_FILES['upload']['tmp_name'], $url);            if (!$move) {                $message = "Error moving uploaded file. Check the script is granted Read/Write/Modify permissions." . $url . "";            }        }        $funcNum = $_GET['CKEditorFuncNum'];        $url = $this->webroot . 'files/uploads/' . $imgName;        echo "<script type='text/javascript'>window.parent.CKEDITOR.tools.callFunction($funcNum, '$url', '$message');</script>";        exit;    }    public function invite_friends() {        $request = $this->request;        if ($request->is('ajax')) {            if ($request->is('post') && !empty($request->data)) {                $data = $request->data;                $emailIds = $data['InviteFriend']['mailids'];                $msg = $data['InviteFriend']['message'];                $pin_id = $data['InviteFriend']['pid'];                $sender_name = $this->Session->read('Auth.User.full_name');                $subject = "Invitation to join " . SITE_NAME;                $url_site = Router::url("/", true);                $url_link = '<a href="' . $url_site . '">Click here to see more information</a>' . PHP_EOL;                if (!empty($pin_id)) {                    $this->loadModel("Pin");                    $result = $this->Pin->find("first", array(                        "conditions" => array("Pin.id" => $pin_id, "Pin.status" => 1),                        "recursive" => -1                    ));                    if (!empty($result)) {                        if ($result['Pin']['location_type'] == '2') {                            $subject = "Invitation to join event on " . SITE_NAME;                        }                        $url_detail = PinUrl::_url($result['Pin'], true);                        $url_link = '<a href="' . $url_detail . '">Click here to see more information</a>' . PHP_EOL;                    }                }                $msg .= PHP_EOL                        . $url_link                        . PHP_EOL . "Regards," . PHP_EOL                        . $sender_name;                $emailArray = explode(',', $emailIds);                foreach ($emailArray as $email) {                    $this->EmailContent->_sendMail($email, $subject, $msg);                }                $response = array("status" => 1, "msg" => __("Mail sent successfully."));                echo json_encode($response);                exit;            } else {                $pin_id = $request->query('pin');                $msg_content = "Hello," . PHP_EOL                        . "You are invited to join " . SITE_NAME;                if (!empty($pin_id)) {                    $this->loadModel("Pin");                    $result = $this->Pin->find("first", array(                        "conditions" => array("Pin.status" => 1, "Pin.id" => $pin_id),                        "fields" => array("id", "name", "event_date", "address", "address2", "location_type"),                        "recursive" => -1                    ));                    if (!empty($result)) {                        if ($result["Pin"]["location_type"] == '2') {                            $msg_content = "Hello," . PHP_EOL                                    . 'You are invited to join the event "' . $result['Pin']['name'] . '" at '                                    . $result['Pin']["address"] . ((!empty($result['Pin']["address2"])) ? ", " . $result['Pin']["address2"] : "")                                    . " on " . $result['Pin']['event_date'];                        } else {                            $loc_name = ($result["Pin"]["location_type"] == '1') ? "facility " : "shop ";                            $msg_content = "Hello," . PHP_EOL                                    . "You are invited to the view the " . $loc_name . '"' . $result['Pin']['name'] . '" on ' . SITE_NAME;                        }                    }                }                $this->request->data = array('InviteFriend' => array("message" => $msg_content));                $this->set(compact("msg_content", "pin_id"));            }        } else {            $this->render("/nodirecturl");        }    }}